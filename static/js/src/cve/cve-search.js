/**
 * isValidCveId
 *
 * Checks if the supplied value is a valid CVE ID in the format
 *
 * A CVE ID consists consists of `cve-` (case-insensitive)
 * followed by 4 integers, follwed by `-`, followed by 4 to 7 integers
 *
 * @param {string} value
 * @returns {boolean}
 */
function isValidCveId(value) {
  if (!value) {
    return;
  }

  const cveIdPattern = /^(cve-)?\d{4}-\d{4,7}$/gi;

  return value.match(cveIdPattern);
}

/**
 * Preprends and CVE with `cve-` if not already there
 *
 * @param {string} node
 * @returns {string}
 */
function constructCveId(value) {
  const cvePrefixPattern = /^(cve-)/gi;

  if (!value.match(cvePrefixPattern)) {
    value = `cve-${value}`;
  }

  return value;
}

/**
 * isDomNode
 *
 * Checks that the supplied value is a DOM node
 *
 * @param {HTMLElement} node
 * @returns {boolean}
 */
function isDomNode(node) {
  try {
    return node instanceof HTMLElement;
  } catch (e) {
    return;
  }
}

/**
 * disableField
 *
 * Sets the `disabled` attribute on the supplied DOM node

 * @param {HTMLElement} field
 * @returns {undefined}
 */
function disableField(field) {
  if (!isDomNode(field)) {
    return;
  }

  field.setAttribute("disabled", true);
}

/**
 * enableField
 *
 * Removes the `disabled` attribute from the supplied DOM node
 *
 * @param {*} field
 * @returns {undefined}
 */
function enableField(field) {
  if (!isDomNode(field)) {
    return;
  }

  field.removeAttribute("disabled");
}

export { isValidCveId, constructCveId, isDomNode, disableField, enableField };
