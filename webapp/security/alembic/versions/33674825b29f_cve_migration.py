"""“cve_migration”

Revision ID: 33674825b29f
Revises: e8760725610a
Create Date: 2020-04-01 11:04:40.245913

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column

# revision identifiers, used by Alembic.
revision = "33674825b29f"
down_revision = "e8760725610a"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "bug",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uri", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "cve_reference",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uri", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "package",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column(
            "type",
            sa.Enum("package", "product", "snap", name="packagetype"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "cve_bugs",
        sa.Column("cve_id", sa.String(), nullable=True),
        sa.Column("bug_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["bug_id"], ["bug.id"],),
        sa.ForeignKeyConstraint(["cve_id"], ["cve.id"],),
    )
    op.create_table(
        "cve_packages",
        sa.Column("cve_id", sa.String(), nullable=True),
        sa.Column("package_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.Integer(), nullable=True),
        sa.Column(
            "type",
            sa.Enum("package", "product", "snap", name="packagetype"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["cve_id"], ["cve.id"],),
        sa.ForeignKeyConstraint(["name"], ["release.id"],),
        sa.ForeignKeyConstraint(["package_id"], ["package.id"],),
    )
    op.create_table(
        "cve_references",
        sa.Column("cve_id", sa.String(), nullable=True),
        sa.Column("cve_reference_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["cve_id"], ["cve.id"],),
        sa.ForeignKeyConstraint(["cve_reference_id"], ["cve_reference.id"],),
    )
    op.create_table(
        "package_release_status",
        sa.Column("package_id", sa.Integer(), nullable=True),
        sa.Column("release_id", sa.Integer(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "needs_triage",
                "needed",
                "deferred",
                "pending",
                "released",
                "released_esm",
                "ignored",
                "not_affected",
                "dne",
                name="packagestatus",
            ),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["package_id"], ["package.id"],),
        sa.ForeignKeyConstraint(["release_id"], ["release.id"],),
    )
    op.add_column("cve", sa.Column("approved_by", sa.String(), nullable=True))
    op.add_column("cve", sa.Column("assigned_to", sa.String(), nullable=True))
    op.add_column("cve", sa.Column("crd", sa.String(), nullable=True))
    op.add_column("cve", sa.Column("cvss", sa.String(), nullable=True))
    op.add_column("cve", sa.Column("description", sa.String(), nullable=True))
    op.add_column(
        "cve", sa.Column("discovered_by", sa.String(), nullable=True)
    )
    op.add_column("cve", sa.Column("mitigation", sa.String(), nullable=True))
    op.add_column("cve", sa.Column("notes", sa.String(), nullable=True))
    op.add_column("cve", sa.Column("priority", sa.String(), nullable=True))
    op.add_column("cve", sa.Column("public_date", sa.String(), nullable=True))
    op.add_column(
        "cve", sa.Column("public_date_usn", sa.String(), nullable=True)
    )
    op.add_column("cve", sa.Column("status", sa.String(), nullable=True))
    op.add_column(
        "cve", sa.Column("ubuntu_description", sa.String(), nullable=True)
    )
    # ### end Alembic commands ###

    cve_table = table(
        "cve",
        column("id", sa.String()),
        column("status", sa.String()),
        column("public_date", sa.String()),
        column("description", sa.String()),
        column("notes", sa.String()),
    )

    op.bulk_insert(
        cve_table,
        [
            {
                "id": "CVE-2020-10535",
                "status": "active",
                "public_date": "2020-03-12 23:15:00 UTC",
                "description": "GitLab 12.8.x before 12.8.6, when sign-up is enabled, allows remote attackers to bypass email domain",
                "notes": "",
            },
            {
                "id": "CVE-2019-1010262",
                "status": "rejected",
                "public_date": "2019-07-18 17:15:00 UTC",
                "description": "** REJECT ** DO NOT USE THIS CANDIDATE NUMBER. ConsultIDs: CVE-2019-1010142. Reason: This candidate is a reservation duplicate of CVE-2019-1010142.",
                "notes": "",
            },
            {
                "id": "CVE-2020-9064",
                "status": "not-for-us",
                "public_date": "",
                "description": "",
                "notes": 'Ubuntu-security Does not apply to software  found in Ubuntu. "Huawei"',
            },
        ],
    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("cve", "ubuntu_description")
    op.drop_column("cve", "status")
    op.drop_column("cve", "public_date_usn")
    op.drop_column("cve", "public_date")
    op.drop_column("cve", "priority")
    op.drop_column("cve", "notes")
    op.drop_column("cve", "mitigation")
    op.drop_column("cve", "discovered_by")
    op.drop_column("cve", "description")
    op.drop_column("cve", "cvss")
    op.drop_column("cve", "crd")
    op.drop_column("cve", "assigned_to")
    op.drop_column("cve", "approved_by")
    op.drop_table("package_release_status")
    op.drop_table("cve_references")
    op.drop_table("cve_packages")
    op.drop_table("cve_bugs")
    op.drop_table("package")
    op.drop_table("cve_reference")
    op.drop_table("bug")
    # ### end Alembic commands ###
